# This is a workflow that is manually triggered to deploy supported components other than applications

name: Manual Deploy Workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      target_env: 
        description: 'Target github environment to use'
        default: 'dev_env'
        required: true
      deploy_components:
        description: |
          Components to deploy separated by commas.
          Support "nodeautoscaler", "lb", "keepalived".
        default: 'nodeautoscaler,lb,keepalived'
        required: true
      dry_run:
        description: |
          If set to 'yes', run all deployment in dry-run mode.
          Otherwise, set to 'no'.
        default: 'yes'
        required: true
      kubectl_version:
        description: 'Version of kubectl to be installed'
        default: '1.19.9'
        required: true
      # Use following command to generate base64 code:
      #   cat <<EOF | base64 | tr -d '\n' | xargs echo
      #   <your_autoscalegroups_yaml>
      #   EOF
      auto_scale_groups:
        description: |
          The auto scale groups defined in yaml to apply given as a string from base64 encoding.
          See the comments in .github/workflows/manual.yml for how to get a base64 encoded yaml.
          If this is set to empty, the nodeautoscaler/deploy/auto-scale-groups-configmap.yml in repo will be used.
        default: ''
        required: false
      all_peers_ip:
        description: |
          The private IPs of all nodes running keepalived talked to AWS separated by comma.
          For example, "10.0.0.1,10.0.0.2"
        default: ''
        required: true
      eip_alloc_id:
        description: |
          The allocation ID of elastic IP in AWS used as the virtual IP in keepalived.
          If set to empty, the value of secret EIP_ALLOC_ID in the input env
          set by target_env will be used
        default: ''
        required: false
      kube_config:
        description: |
          A base64 encoded kubeconfig file content which is used to apply workloads.
          If set to empty, the value of secret KUBE_CONFIG in the input env
          set by target_env will be used
        default: ''
        required: false
      rancher_url:
        description: |
          The URL of target rancher when node auto scaler uses Rancher as backend node provisioner.
          If set to empty, the value of secret RANCHER_URL in the input env
          set by target_env will be used
        default: ''
        required: false
      rancher_token:
        description: |
          The token string used to talk to target rancher when node auto scaler uses Rancher as backend node provisioner.
          If set to empty, the value of secret RANCHER_TOKEN in the input env
          set by target_env will be used
        default: ''
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Deploy components
  deploy:
    # Use dev environment
    environment: ${{ github.event.inputs.target_env }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Environment variables
    env:
      DRY_RUN: ${{ github.event.inputs.dry_run }}
      AUTO_SCALE_GROUPS: ${{ github.event.inputs.auto_scale_groups }}
      RANCHER_URL: ${{  github.event.inputs.rancher_url }}
      RANCHER_TOKEN: ${{ github.event.inputs.rancher_token }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Setup kubectl with input kubeconfig
      uses: ThomasKliszowski/setup-kubectl@v1
      if: ${{ github.event.inputs.kube_config != '' }}
      with:
        # Base64 encoded kube config
        kube-config: ${{ github.event.inputs.kube_config }}
        # Kube version used to download kubectl executable, defaults to latest
        kube-version: ${{ github.event.inputs.kubectl_version }}
    - name: Setup kubectl with empty input kubeconfig
      uses: ThomasKliszowski/setup-kubectl@v1
      if: ${{ github.event.inputs.kube_config == '' }}
      with:
        # Base64 encoded kube config
        kube-config: ${{ secrets.KUBE_CONFIG }}
        # Kube version used to download kubectl executable, defaults to latest
        kube-version: ${{ github.event.inputs.kubectl_version }}
    # Check installed kubectl
    - name: Check installed kubectl
      run: |
        kubectl version
    # Check configured kubeconfig
    - name: Check and persist kubeconfig
      id: step_kubeconfig
      run: |
        kubectl config view
    # Checkout local repo
    - name: Checkout local repo
      uses: actions/checkout@v2.3.4
    # Replace ConfigMap of auto scale groups with input value
    - name: Generate configmap with auto scale groups
      if: ${{ env.AUTO_SCALE_GROUPS != '' && contains(github.event.inputs.deploy_components, 'nodeautoscaler') }}
      run: |
        echo
        echo "********** Got input auto scale groups ***********"
        echo
        echo ${AUTO_SCALE_GROUPS} | base64 -d | tee autoscalegroups.yaml
        echo
        echo "********** Generate configmap ************"
        echo
        kubectl create cm auto-scale-groups -n node-auto-scaler --from-file=autoscalegroups.yaml \
           --dry-run=client -o yaml | tee ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/auto-scale-groups-configmap.yaml
    # Apply configmap in the repo
    - name: Deploy configmap of auto scale groups
      if: ${{ contains(github.event.inputs.deploy_components, 'nodeautoscaler') }}
      run: |
        if [ "$DRY_RUN" == 'yes' ]
        then
          echo
          echo "********** Deploy configmap in dry-run mode ************"
          echo
          kubectl replace -f ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/auto-scale-groups-configmap.yaml \
            --dry-run=client -o yaml
        else
          echo
          echo "********** Deploy configmap ************"
          echo
          kubectl replace -f ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/auto-scale-groups-configmap.yaml -o yaml
        fi
    - name: Deploy rancher secret
      if: ${{ contains(github.event.inputs.deploy_components, 'nodeautoscaler') }}
      env:
        ENV_RANCHER_URL: ${{ secrets.RANCHER_URL }}
        ENV_RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
      run: |
        if [ "$RANCHER_URL" == '' ]
        then
          echo
          echo "********** No rancher_url input, use environment secret *************"
          echo
          RANCHER_URL=${ENV_RANCHER_URL}
        fi
        echo
        echo "********** Use rancher_url ${RANCHER_URL} *************"
        echo
        ENCODE_URL=$(echo ${RANCHER_URL} | base64 | tr -d '\n')
        sed -i "s/{{ RANCHER_URL }}/${ENCODE_URL}/g" ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/rancher-secret.yaml
        if [ "$RANCHER_TOKEN" == '' ]
        then
          echo
          echo "********** No rancher_token input, use environment secret *************"
          echo
          RANCHER_TOKEN=${ENV_RANCHER_TOKEN}
        fi
        ENCODE_TOKEN=$(echo ${RANCHER_TOKEN} | base64 | tr -d '\n')
        sed -i "s/{{ RANCHER_TOKEN }}/${ENCODE_TOKEN}/g" ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/rancher-secret.yaml
        if [ "$DRY_RUN" == 'yes' ]
        then
          echo
          echo "********** Deploy secret in dry-run mode ************"
          echo
          kubectl replace -f ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/rancher-secret.yaml \
            --dry-run=client -o yaml
        else
          echo
          echo "********** Deploy secret ************"
          echo
          kubectl replace -f ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/rancher-secret.yaml -o yaml
        fi
    - name: Deploy node auto scaler
      if: ${{ contains(github.event.inputs.deploy_components, 'nodeautoscaler') }}
      run: |
        if [ "$DRY_RUN" == 'yes' ]
        then
          echo
          echo "********** Deploy node auto scaler in dry-run mode ************"
          echo
          kubectl apply -f ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/node-auto-scaler-manifests.yaml \
            --dry-run=client -o yaml
        else
          echo
          echo "********** Deploy node auto scaler ************"
          echo
          kubectl replace -f ${GITHUB_WORKSPACE}/nodeautoscaler/deploy/node-auto-scaler-manifests.yaml -o yaml
        fi
